//
// Wrap.impl
//
// Created on: 2022-01-22
//     Author: Dmitry Murashov (dmtr <DOT> murashov <AT> <GMAIL>)
//

#include <Rr/Trait/Forward.hpp>
#include <Rr/Util/DefaultConfig.hpp>

namespace Rr {
namespace Cont {
namespace WrapImpl {

// Override for Wrap<ContainerType::Index, ...>

template <class Tv, template <class ...> class Tc>
inline Wrap<ContainerType::Index, Tv, Tc>::Wrap():
	Tc<Tv>{},
	pos{0},
	maxSize(Rr::Refl::CallFamily<CallCapacity, CallMaxSizeUnderscore, CallMaxSizeCamelcase>::call(*((Tc<Tv> *)this)))
{
}

template <class Tv, template <class ...> class Tc>
unsigned Wrap<ContainerType::Index, Tv, Tc>::size() const
{
	return pos;
}

template <class Tv, template <class ...> class Tc>
inline typename Wrap<ContainerType::Index, Tv, Tc>::Iterator
Wrap<ContainerType::Index, Tv, Tc>::begin()
{
	return &this->at(0);
}

template <class Tv, template <class ...> class Tc>
inline typename Wrap<ContainerType::Index, Tv, Tc>::Iterator
Wrap<ContainerType::Index, Tv, Tc>::end()
{
	return (&this->at(0)) + pos;
}

template <class Tv, template <class ...> class Tc>
inline void Wrap<ContainerType::Index, Tv, Tc>::push(const Tv &a)
{
	new (&this->at(pos++), Rr::Object{}) Tv{a};
}

template <class Tv, template <class ...> class Tc>
template <class ...Ts>
inline void Wrap<ContainerType::Index, Tv, Tc>::emplace(Ts &&...aArgs)
{
	new (&this->at(pos++), Rr::Object{}) Tv{Rr::Trait::forward<Ts>(aArgs)...};
}

// Override for Wrap<ContainerType::Push, ...>

template <class Tv, template <class ...> class Tc>
inline Wrap<ContainerType::Push, Tv, Tc>::Wrap():
	Tc<Tv>{},
	sz{0}
{
}

template <class Tv, template <class ...> class Tc>
inline unsigned Wrap<ContainerType::Push, Tv, Tc>::size() const
{
	return sz;
}

template <class Tv, template <class ...> class Tc>
inline typename Wrap<ContainerType::Push, Tv, Tc>::Iterator Wrap<ContainerType::Push, Tv, Tc>::begin()
{
	return this->begin();
}

template <class Tv, template <class ...> class Tc>
inline typename Wrap<ContainerType::Push, Tv, Tc>::Iterator Wrap<ContainerType::Push, Tv, Tc>::end()
{
	return this->end();
}

}  // namespace WrapImpl
}  // namespace Cont
}  // namespace Rr
