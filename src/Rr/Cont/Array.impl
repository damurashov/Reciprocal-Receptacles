//
// Array.impl
//
// Created on: 2022-01-15
//     Author: Dmitry Murashov (dmtr <DOT> murashov <AT> <GMAIL>)
//

namespace Rr {
namespace Cont {

template<class T, unsigned int N>
inline typename Array<T, N>::Reference Array<T, N>::at(unsigned int aPos)
{
	rr_assert(aPos < N);
	return stored[aPos];
}

template<class T, unsigned int N>
inline typename Array<T, N>::ConstReference Array<T, N>::at(unsigned int aPos) const
{
	rr_assert(aPos < N);
	return stored[aPos];
}

template<class T, unsigned int N>
inline constexpr unsigned Array<T, N>::maxSize() const
{
	return N;
}

template<class T, unsigned int N>
inline typename Array<T, N>::Iterator Array<T, N>::begin()
{
	return stored;
}

template<class T, unsigned int N>
inline typename Array<T, N>::Iterator Array<T, N>::end()
{
	return stored + N;
}

template<class T, unsigned int N>
inline typename Array<T, N>::ConstIterator Array<T, N>::cbegin() const
{
    return stored;
}

template<class T, unsigned int N>
inline typename Array<T, N>::ConstIterator Array<T, N>::cend() const
{
    return stored + N;
}

}  // namespace Cont
}  // namespace Rr
