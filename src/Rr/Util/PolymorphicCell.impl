//
// PolymorphicCell.impl
//
// Created: 2021-12-03
//  Author: Dmitry Murashov (dmtr <DOT> murashov <AT> <GMAIL>)
//

namespace Rr {
namespace Util {

template <class Tbase, class ...Tderived>
inline constexpr unsigned PolymorphicCell<Tbase, Tderived...>::size()
{
	return Rr::Trait::MaxSizeof<Tbase, Tderived...>::value;
}


template <class Tbase, class ...Tderived>
template <class T, class ...Targs>
inline PolymorphicCell<Tbase, Tderived...>::PolymorphicCell(T *tPtr, Targs &&...aArgs)
{
	new (memory) T(static_cast<Targs&&>(aArgs)...);
}

template <class Tbase, class ...Tderived>
template <class T>
inline constexpr T* PolymorphicCell<Tbase, Tderived...>::ptr()
{
	return (T *)nullptr;
}

template <class Tbase, class ...Tderived>
inline &PolymorphicCell<Tbase, Tderived...>::operator Tbase &()
{
	return *reinterpret_cast<Tbase *>(memory);
}

template <class Tbase, class ...Tderived>
inline void *PolymorphicCell<Tbase, Tderived...>::data()
{
	return memory;
}

}  // namespace Util
}  // namespace Rr
